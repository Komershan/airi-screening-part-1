[34m[1mwandb[39m[22m: [33mWARNING[39m Calling wandb.run.save without any arguments is deprecated.Changes to attributes are automatically persisted.
/home/aaderevyagin/airi_final/venv/lib/python3.10/site-packages/torch/cuda/__init__.py:619: UserWarning: Can't initialize NVML
  warnings.warn("Can't initialize NVML")
/home/aaderevyagin/airi_final/venv/lib/python3.10/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.set_seed to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.set_seed` for environment variables or `env.get_wrapper_attr('set_seed')` that will search the reminding wrappers.
  logger.warn(
  0%|                                                                                                                     | 0/20000 [00:00<?, ?it/s]
[40  1  0 31  3  0 40  1  0 31  1  0 22  1  0 13  3  0 22  3  0 31  1  0
 22  1  0 13  4  0 12  3  0 21  1  0 12  1  0  3  1  0  3  1  0  3  1  0
  3  1  0  3  1  0  3  3  0 12  1  0]
[40  1  0 31  1  0 22  1  0 13  1  0  4  1  0  4  3  0 13  1  0  4  2  1
  5  4  0  4  0  0  4  0  0  4  0  0  4  3  0 13  1  0  4  3  0 13  1  0
  4  4  0  3  1  0  3  4  0  2  4  0]
[40  1  0 31  1  0 22  1  0 13  1  0  4  4  0  3  4  0  2  0  0  2  1  0
  2  0  0  2  3  0 11  1  0  2  2  0  3  2  0  4  1  0  4  2  1  5  3  0
 14  1  1  5  2  0  6  2  0  7  4  0]
[40  1  0 31  1  0 22  1  0 13  4  0 12  0  0 12  1  0  3  1  0  3  1  0
  3  1  0  3  1  0  3  4  0  2  0  0  2  0  0  2  2  0  3  3  0 12  2  0
 13  1  0  4  1  0  4  0  0  4  2  1]
[40  3  0 49  1  0 40  1  0 31  4  0 30  1  0 21  1  0 12  1  0  3  1  0
  3  1  0  3  2  0  4  1  0  4  3  0 13  1  0  4  2  1  5  1  1  5  1  1
  5  1  1  5  0  1  5  1  1  5  1  1]
[40  1  0 31  1  0 22  1  0 13  3  0 22  1  0 13  2  0 14  3  0 23  1  0
 14  2  0 15  2  0 16  1  0  7  0  0  7  0  0  7  0  0  7  4  0  6  1  0
  6  4  1  5  1  1  5  1  1  5  1  1]
[40  1  0 31  0  0 31  2  0 32  1  0 23  0  0 23  0  0 23  0  0 23  2  0
 24  2  0 25  0  0 25  2  0 26  1  0 17  3  0 26  1  0 17  4  0 16  0  0
 16  1  0  7  0  0  7  1  0  7  0  0]
[40  0  0 40  0  0 40  2  0 41  0  0 41  0  0 41  1  0 32  1  0 23  1  0
 14  1  1  5  0  1  5  0  1  5  3  0 14  1  1  5  0  1  5  3  0 14  1  1
  5  2  0  6  0  0  6  2  0  7  2  0]
[40  1  0 31  2  0 32  0  0 32  3  0 41  4  0 40  1  0 31  2  0 32  1  0
 23  3  0 32  2  0 33  1  0 24  2  0 25  1  0 16  0  0 16  2  0 17  2  0
 17  0  0 17  4  0 16  2  0 17  4  0]
[40  2  0 41  3  0 50  2  0 51  3  0 60  3  0 69  1  0 60  2  0 61  3  0
 70  0  0 70  1  0 61  1  0 52  0  0 52  1  0 43  1  0 34  2  0 35  1  0
 26  1  0 17  0  0 17  0  0 17  1  0]
[40  1  0 31  1  0 22  0  0 22  3  0 31  3  0 40  0  0 40  0  0 40  2  0
 41  3  0 50  0  0 50  2  0 51  1  0 42  0  0 42  0  0 42  1  0 33  0  0
 33  2  0 34  1  0 25  3  0 34  0  0]
[40  3  0 49  1  0 40  2  0 41  4  0 40  0  0 40  0  0 40  0  0 40  0  0
 40  0  0 40  3  0 49  2  0 50  3  0 59  0  0 59  1  0 50  4  0 49  0  0
 49  0  0 49  2  0 50  2  0 51  2  0]
[40  2  0 41  2  0 42  0  0 42  3  0 51  0  0 51  2  0 52  4  0 51  2  0
 52  2  0 53  4  0 52  3  0 61  1  0 52  3  0 61  1  0 52  1  0 43  2  0
 44  0  0 44  0  0 44  0  0 44  1  0]
[40  0  0 40  3  0 49  3  0 58  3  0 67  4  0 66  2  0 67  2  0 68  4  0
 67  4  0 66  0  0 66  3  0 75  0  0 75  1  0 66  1  0 57  3  0 66  0  0
 66  1  0 57  4  0 56  3  0 65  0  0]
[40  0  0 40  4  0 39  0  0 39  4  0 38  1  0 29  4  0 28  0  0 28  2  0
 29  1  0 20  0  0 20  0  0 20  1  0 11  2  0 12  1  0  3  3  0 12  2  0
 13  1  0  4  3  0 13  0  0 13  0  0]
[40  3  0 49  4  0 48  0  0 48  2  0 49  4  0 48  0  0 48  4  0 47  3  0
 56  0  0 56  4  0 55  3  0 64  0  0 64  0  0 64  1  0 55  0  0 55  0  0
 55  3  0 64  0  0 64  0  0 64  3  0]
[40  1  0 31  2  0 32  4  0 31  3  0 40  3  0 49  3  0 58  0  0 58  1  0
 49  4  0 48  3  0 57  0  0 57  0  0 57  4  0 56  4  0 55  4  0 54  3  0
 63  4  0 63  2  0 64  4  0 63  2  0]
[40  2  0 41  2  0 42  1  0 33  0  0 33  2  0 34  3  0 43  0  0 43  0  0
 43  4  0 42  4  0 41  0  0 41  0  0 41  1  0 32  4  0 31  0  0 31  4  0
 30  4  0 29  4  0 28  1  0 19  1  0]
[40  3  0 49  3  0 58  3  0 67  0  0 67  1  0 58  0  0 58  0  0 58  2  0
 59  2  0 60  2  0 61  1  0 52  2  0 53  0  0 53  2  0 53  3  0 62  3  0
 71  4  0 70  3  0 79  2  0 80  2  0]
[40  4  0 39  4  0 38  3  0 47  3  0 56  4  0 55  2  0 56  0  0 56  0  0
 56  4  0 55  0  0 55  0  0 55  4  0 54  0  0 54  3  0 63  0  0 63  1  0
  0%|                                                                                                            | 20/20000 [00:02<46:14,  7.20it/s]
Traceback (most recent call last):
Traceback (most recent call last):
  File "/home/aaderevyagin/airi_final/airi-screening-part-1/./scripts/data_generation.py", line 197, in <module>
    main()
  File "/usr/lib/python3.10/multiprocessing/resource_sharer.py", line 138, in _serve
    with self._listener.accept() as conn:
  File "/home/aaderevyagin/airi_final/venv/lib/python3.10/site-packages/pyrallis/argparsing.py", line 158, in wrapper_inner
    response = fn(cfg, *args, **kwargs)
  File "/usr/lib/python3.10/multiprocessing/connection.py", line 466, in accept
    answer_challenge(c, self._authkey)
  File "/home/aaderevyagin/airi_final/airi-screening-part-1/./scripts/data_generation.py", line 186, in main
    train_tasks = generate_histories(
  File "/usr/lib/python3.10/multiprocessing/connection.py", line 752, in answer_challenge
    message = connection.recv_bytes(256)         # reject large message
  File "/home/aaderevyagin/airi_final/airi-screening-part-1/./scripts/data_generation.py", line 63, in generate_histories
    curr_history = generator.train_from_model(
  File "/usr/lib/python3.10/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/home/aaderevyagin/airi_final/airi-screening-part-1/algorithms/generation_baselines/a2c.py", line 132, in train_from_model
    model, histories = train(config, environment)
  File "/usr/lib/python3.10/multiprocessing/connection.py", line 414, in _recv_bytes
    buf = self._recv(4)
  File "/home/aaderevyagin/airi_final/airi-screening-part-1/algorithms/generation_baselines/a2c.py", line 306, in train
    parallel_results = pool.map(calc_loss_on_episode, args)
  File "/usr/lib/python3.10/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
  File "/usr/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
ConnectionResetError: [Errno 104] Connection reset by peer
  File "/usr/lib/python3.10/multiprocessing/pool.py", line 768, in get
    self.wait(timeout)
  File "/usr/lib/python3.10/multiprocessing/pool.py", line 765, in wait
    self._event.wait(timeout)
  File "/usr/lib/python3.10/threading.py", line 607, in wait
    signaled = self._cond.wait(timeout)
  File "/usr/lib/python3.10/threading.py", line 320, in wait
    waiter.acquire()
KeyboardInterrupt